// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: atom/atom_toll.proto
// Original file comments:
// Copyright 2018 Ministry of Power, Works and Housing. Powered by 
// Nigerian Communications Satellite (NigComSat) Ltd.
//
// Licensed under the Atom License, Version 1.0 (the "License");
// you may not use this file except in compliance with the Atom License.
//
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Atom {
  /// <summary>
  /// functions implemented and exposed by all toll operators consumed by DASH
  /// </summary>
  public static partial class TollAuditService
  {
    static readonly string __ServiceName = "atom.TollAuditService";

    static readonly grpc::Marshaller<global::Atom.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Atom.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Atom.VehicleInfo> __Marshaller_VehicleInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Atom.VehicleInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Atom.VehicleCount> __Marshaller_VehicleCount = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Atom.VehicleCount.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Atom.TimeRange> __Marshaller_TimeRange = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Atom.TimeRange.Parser.ParseFrom);

    static readonly grpc::Method<global::Atom.Empty, global::Atom.VehicleInfo> __Method_GetLiveStream = new grpc::Method<global::Atom.Empty, global::Atom.VehicleInfo>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetLiveStream",
        __Marshaller_Empty,
        __Marshaller_VehicleInfo);

    static readonly grpc::Method<global::Atom.Empty, global::Atom.VehicleCount> __Method_GetLiveCount = new grpc::Method<global::Atom.Empty, global::Atom.VehicleCount>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetLiveCount",
        __Marshaller_Empty,
        __Marshaller_VehicleCount);

    static readonly grpc::Method<global::Atom.TimeRange, global::Atom.VehicleCount> __Method_GetVehicleCount = new grpc::Method<global::Atom.TimeRange, global::Atom.VehicleCount>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVehicleCount",
        __Marshaller_TimeRange,
        __Marshaller_VehicleCount);

    static readonly grpc::Method<global::Atom.TimeRange, global::Atom.VehicleInfo> __Method_GetVehicleCountSummary = new grpc::Method<global::Atom.TimeRange, global::Atom.VehicleInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVehicleCountSummary",
        __Marshaller_TimeRange,
        __Marshaller_VehicleInfo);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Atom.AtomTollReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TollAuditService</summary>
    public abstract partial class TollAuditServiceBase
    {
      /// <summary>
      /// get real-time data; process incoming one at a time
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetLiveStream(global::Atom.Empty request, grpc::IServerStreamWriter<global::Atom.VehicleInfo> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// function implemented and exposed by the CR-Chips
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetLiveCount(global::Atom.Empty request, grpc::IServerStreamWriter<global::Atom.VehicleCount> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get historical data
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Atom.VehicleCount> GetVehicleCount(global::Atom.TimeRange request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Atom.VehicleInfo> GetVehicleCountSummary(global::Atom.TimeRange request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TollAuditService</summary>
    public partial class TollAuditServiceClient : grpc::ClientBase<TollAuditServiceClient>
    {
      /// <summary>Creates a new client for TollAuditService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TollAuditServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TollAuditService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TollAuditServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TollAuditServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TollAuditServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// get real-time data; process incoming one at a time
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Atom.VehicleInfo> GetLiveStream(global::Atom.Empty request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetLiveStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get real-time data; process incoming one at a time
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Atom.VehicleInfo> GetLiveStream(global::Atom.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetLiveStream, null, options, request);
      }
      /// <summary>
      /// function implemented and exposed by the CR-Chips
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Atom.VehicleCount> GetLiveCount(global::Atom.Empty request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetLiveCount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// function implemented and exposed by the CR-Chips
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Atom.VehicleCount> GetLiveCount(global::Atom.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetLiveCount, null, options, request);
      }
      /// <summary>
      /// get historical data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Atom.VehicleCount GetVehicleCount(global::Atom.TimeRange request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetVehicleCount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get historical data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Atom.VehicleCount GetVehicleCount(global::Atom.TimeRange request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVehicleCount, null, options, request);
      }
      /// <summary>
      /// get historical data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Atom.VehicleCount> GetVehicleCountAsync(global::Atom.TimeRange request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetVehicleCountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get historical data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Atom.VehicleCount> GetVehicleCountAsync(global::Atom.TimeRange request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVehicleCount, null, options, request);
      }
      public virtual global::Atom.VehicleInfo GetVehicleCountSummary(global::Atom.TimeRange request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetVehicleCountSummary(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Atom.VehicleInfo GetVehicleCountSummary(global::Atom.TimeRange request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVehicleCountSummary, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Atom.VehicleInfo> GetVehicleCountSummaryAsync(global::Atom.TimeRange request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetVehicleCountSummaryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Atom.VehicleInfo> GetVehicleCountSummaryAsync(global::Atom.TimeRange request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVehicleCountSummary, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TollAuditServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TollAuditServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TollAuditServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetLiveStream, serviceImpl.GetLiveStream)
          .AddMethod(__Method_GetLiveCount, serviceImpl.GetLiveCount)
          .AddMethod(__Method_GetVehicleCount, serviceImpl.GetVehicleCount)
          .AddMethod(__Method_GetVehicleCountSummary, serviceImpl.GetVehicleCountSummary).Build();
    }

  }
}
#endregion
