// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: atom/atom_toll.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Atom {

  /// <summary>Holder for reflection information generated from atom/atom_toll.proto</summary>
  public static partial class AtomTollReflection {

    #region Descriptor
    /// <summary>File descriptor for atom/atom_toll.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AtomTollReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRhdG9tL2F0b21fdG9sbC5wcm90bxIEYXRvbSImCgxTdWJzY3JpcHRpb24S",
            "FgoOc3Vic2NyaXB0aW9uSWQYASABKAkiJwoUU3Vic2NyaXB0aW9uUmVzcG9u",
            "c2USDwoHc3VjY2VzcxgBIAEoCCISCgNVSUQSCwoDdWlkGAEgASgJInEKB1Zl",
            "aGljbGUSIAoNdHJhbnNwb25kZXJJRBgBIAEoCzIJLmF0b20uVUlEEigKDHZl",
            "aGljbGVDbGFzcxgCIAEoDjISLmF0b20uVmVoaWNsZUNsYXNzEhoKEmxpY2Vu",
            "c2VQbGF0ZU51bWJlchgDIAEoCSIcCghUb2xsRmFyZRIQCgh0b2xsRmFyZRgB",
            "IAEoASJyCg9Ub2xsVmVoaWNsZUluZm8SHgoHdmVoaWNsZRgBIAEoCzINLmF0",
            "b20uVmVoaWNsZRIdCgl0aW1lc3RhbXAYAiABKAsyCi5hdG9tLmRhdGUSIAoI",
            "dG9sbEZhcmUYAyABKAsyDi5hdG9tLlRvbGxGYXJlIh0KDFZlaGljbGVDb3Vu",
            "dBINCgVjb3VudBgBIAEoBSJJCgtTZWFyY2hSYW5nZRIdCglzdGFydERhdGUY",
            "ASABKAsyCi5hdG9tLmRhdGUSGwoHZW5kRGF0ZRgCIAEoCzIKLmF0b20uZGF0",
            "ZSIYCgRkYXRlEhAKCG5hbm9zZWNzGAEgASgDIgcKBUVtcHR5KkYKDFZlaGlj",
            "bGVDbGFzcxINCglNT1RPUkJJS0UQABIJCgVTQUxPThABEgcKA1NVVhACEgcK",
            "A0JVUxADEgoKBk9USEVSUxAEMpUDChBUb2xsQXVkaXRTZXJ2aWNlEj0KCVN1",
            "YnNjcmliZRISLmF0b20uU3Vic2NyaXB0aW9uGhouYXRvbS5TdWJzY3JpcHRp",
            "b25SZXNwb25zZSIAEj8KC1Vuc3Vic2NyaWJlEhIuYXRvbS5TdWJzY3JpcHRp",
            "b24aGi5hdG9tLlN1YnNjcmlwdGlvblJlc3BvbnNlIgASPgoNR2V0TGl2ZVN0",
            "cmVhbRISLmF0b20uU3Vic2NyaXB0aW9uGhUuYXRvbS5Ub2xsVmVoaWNsZUlu",
            "Zm8iADABEj8KEUdldERhaWx5TGl2ZUNvdW50EhIuYXRvbS5TdWJzY3JpcHRp",
            "b24aEi5hdG9tLlZlaGljbGVDb3VudCIAMAESOgoPR2V0VmVoaWNsZUNvdW50",
            "EhEuYXRvbS5TZWFyY2hSYW5nZRoSLmF0b20uVmVoaWNsZUNvdW50IgASRAoW",
            "R2V0VmVoaWNsZUNvdW50U3VtbWFyeRIRLmF0b20uU2VhcmNoUmFuZ2UaFS5h",
            "dG9tLlRvbGxWZWhpY2xlSW5mbyIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Atom.VehicleClass), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Atom.Subscription), global::Atom.Subscription.Parser, new[]{ "SubscriptionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Atom.SubscriptionResponse), global::Atom.SubscriptionResponse.Parser, new[]{ "Success" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Atom.UID), global::Atom.UID.Parser, new[]{ "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Atom.Vehicle), global::Atom.Vehicle.Parser, new[]{ "TransponderID", "VehicleClass", "LicensePlateNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Atom.TollFare), global::Atom.TollFare.Parser, new[]{ "TollFare_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Atom.TollVehicleInfo), global::Atom.TollVehicleInfo.Parser, new[]{ "Vehicle", "Timestamp", "TollFare" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Atom.VehicleCount), global::Atom.VehicleCount.Parser, new[]{ "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Atom.SearchRange), global::Atom.SearchRange.Parser, new[]{ "StartDate", "EndDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Atom.date), global::Atom.date.Parser, new[]{ "Nanosecs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Atom.Empty), global::Atom.Empty.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum VehicleClass {
    [pbr::OriginalName("MOTORBIKE")] Motorbike = 0,
    [pbr::OriginalName("SALON")] Salon = 1,
    [pbr::OriginalName("SUV")] Suv = 2,
    [pbr::OriginalName("BUS")] Bus = 3,
    [pbr::OriginalName("OTHERS")] Others = 4,
  }

  #endregion

  #region Messages
  public sealed partial class Subscription : pb::IMessage<Subscription> {
    private static readonly pb::MessageParser<Subscription> _parser = new pb::MessageParser<Subscription>(() => new Subscription());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Subscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Atom.AtomTollReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subscription(Subscription other) : this() {
      subscriptionId_ = other.subscriptionId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subscription Clone() {
      return new Subscription(this);
    }

    /// <summary>Field number for the "subscriptionId" field.</summary>
    public const int SubscriptionIdFieldNumber = 1;
    private string subscriptionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubscriptionId {
      get { return subscriptionId_; }
      set {
        subscriptionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Subscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Subscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubscriptionId != other.SubscriptionId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubscriptionId.Length != 0) hash ^= SubscriptionId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubscriptionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubscriptionId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubscriptionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubscriptionId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Subscription other) {
      if (other == null) {
        return;
      }
      if (other.SubscriptionId.Length != 0) {
        SubscriptionId = other.SubscriptionId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SubscriptionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubscriptionResponse : pb::IMessage<SubscriptionResponse> {
    private static readonly pb::MessageParser<SubscriptionResponse> _parser = new pb::MessageParser<SubscriptionResponse>(() => new SubscriptionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscriptionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Atom.AtomTollReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionResponse(SubscriptionResponse other) : this() {
      success_ = other.success_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionResponse Clone() {
      return new SubscriptionResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscriptionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscriptionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscriptionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UID : pb::IMessage<UID> {
    private static readonly pb::MessageParser<UID> _parser = new pb::MessageParser<UID>(() => new UID());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UID> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Atom.AtomTollReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UID() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UID(UID other) : this() {
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UID Clone() {
      return new UID(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    /// <summary>
    /// uniquely identifies a vehicle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UID);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UID other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UID other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vehicle : pb::IMessage<Vehicle> {
    private static readonly pb::MessageParser<Vehicle> _parser = new pb::MessageParser<Vehicle>(() => new Vehicle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vehicle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Atom.AtomTollReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle(Vehicle other) : this() {
      TransponderID = other.transponderID_ != null ? other.TransponderID.Clone() : null;
      vehicleClass_ = other.vehicleClass_;
      licensePlateNumber_ = other.licensePlateNumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vehicle Clone() {
      return new Vehicle(this);
    }

    /// <summary>Field number for the "transponderID" field.</summary>
    public const int TransponderIDFieldNumber = 1;
    private global::Atom.UID transponderID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Atom.UID TransponderID {
      get { return transponderID_; }
      set {
        transponderID_ = value;
      }
    }

    /// <summary>Field number for the "vehicleClass" field.</summary>
    public const int VehicleClassFieldNumber = 2;
    private global::Atom.VehicleClass vehicleClass_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Atom.VehicleClass VehicleClass {
      get { return vehicleClass_; }
      set {
        vehicleClass_ = value;
      }
    }

    /// <summary>Field number for the "licensePlateNumber" field.</summary>
    public const int LicensePlateNumberFieldNumber = 3;
    private string licensePlateNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LicensePlateNumber {
      get { return licensePlateNumber_; }
      set {
        licensePlateNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vehicle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vehicle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TransponderID, other.TransponderID)) return false;
      if (VehicleClass != other.VehicleClass) return false;
      if (LicensePlateNumber != other.LicensePlateNumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transponderID_ != null) hash ^= TransponderID.GetHashCode();
      if (VehicleClass != 0) hash ^= VehicleClass.GetHashCode();
      if (LicensePlateNumber.Length != 0) hash ^= LicensePlateNumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transponderID_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TransponderID);
      }
      if (VehicleClass != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) VehicleClass);
      }
      if (LicensePlateNumber.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LicensePlateNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transponderID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransponderID);
      }
      if (VehicleClass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VehicleClass);
      }
      if (LicensePlateNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LicensePlateNumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vehicle other) {
      if (other == null) {
        return;
      }
      if (other.transponderID_ != null) {
        if (transponderID_ == null) {
          transponderID_ = new global::Atom.UID();
        }
        TransponderID.MergeFrom(other.TransponderID);
      }
      if (other.VehicleClass != 0) {
        VehicleClass = other.VehicleClass;
      }
      if (other.LicensePlateNumber.Length != 0) {
        LicensePlateNumber = other.LicensePlateNumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (transponderID_ == null) {
              transponderID_ = new global::Atom.UID();
            }
            input.ReadMessage(transponderID_);
            break;
          }
          case 16: {
            vehicleClass_ = (global::Atom.VehicleClass) input.ReadEnum();
            break;
          }
          case 26: {
            LicensePlateNumber = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TollFare : pb::IMessage<TollFare> {
    private static readonly pb::MessageParser<TollFare> _parser = new pb::MessageParser<TollFare>(() => new TollFare());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TollFare> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Atom.AtomTollReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TollFare() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TollFare(TollFare other) : this() {
      tollFare_ = other.tollFare_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TollFare Clone() {
      return new TollFare(this);
    }

    /// <summary>Field number for the "tollFare" field.</summary>
    public const int TollFare_FieldNumber = 1;
    private double tollFare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TollFare_ {
      get { return tollFare_; }
      set {
        tollFare_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TollFare);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TollFare other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TollFare_ != other.TollFare_) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TollFare_ != 0D) hash ^= TollFare_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TollFare_ != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(TollFare_);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TollFare_ != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TollFare other) {
      if (other == null) {
        return;
      }
      if (other.TollFare_ != 0D) {
        TollFare_ = other.TollFare_;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            TollFare_ = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TollVehicleInfo : pb::IMessage<TollVehicleInfo> {
    private static readonly pb::MessageParser<TollVehicleInfo> _parser = new pb::MessageParser<TollVehicleInfo>(() => new TollVehicleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TollVehicleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Atom.AtomTollReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TollVehicleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TollVehicleInfo(TollVehicleInfo other) : this() {
      Vehicle = other.vehicle_ != null ? other.Vehicle.Clone() : null;
      Timestamp = other.timestamp_ != null ? other.Timestamp.Clone() : null;
      TollFare = other.tollFare_ != null ? other.TollFare.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TollVehicleInfo Clone() {
      return new TollVehicleInfo(this);
    }

    /// <summary>Field number for the "vehicle" field.</summary>
    public const int VehicleFieldNumber = 1;
    private global::Atom.Vehicle vehicle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Atom.Vehicle Vehicle {
      get { return vehicle_; }
      set {
        vehicle_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private global::Atom.date timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Atom.date Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "tollFare" field.</summary>
    public const int TollFareFieldNumber = 3;
    private global::Atom.TollFare tollFare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Atom.TollFare TollFare {
      get { return tollFare_; }
      set {
        tollFare_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TollVehicleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TollVehicleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Vehicle, other.Vehicle)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(TollFare, other.TollFare)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (vehicle_ != null) hash ^= Vehicle.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (tollFare_ != null) hash ^= TollFare.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (vehicle_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Vehicle);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Timestamp);
      }
      if (tollFare_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TollFare);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (vehicle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vehicle);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (tollFare_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TollFare);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TollVehicleInfo other) {
      if (other == null) {
        return;
      }
      if (other.vehicle_ != null) {
        if (vehicle_ == null) {
          vehicle_ = new global::Atom.Vehicle();
        }
        Vehicle.MergeFrom(other.Vehicle);
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          timestamp_ = new global::Atom.date();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.tollFare_ != null) {
        if (tollFare_ == null) {
          tollFare_ = new global::Atom.TollFare();
        }
        TollFare.MergeFrom(other.TollFare);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (vehicle_ == null) {
              vehicle_ = new global::Atom.Vehicle();
            }
            input.ReadMessage(vehicle_);
            break;
          }
          case 18: {
            if (timestamp_ == null) {
              timestamp_ = new global::Atom.date();
            }
            input.ReadMessage(timestamp_);
            break;
          }
          case 26: {
            if (tollFare_ == null) {
              tollFare_ = new global::Atom.TollFare();
            }
            input.ReadMessage(tollFare_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VehicleCount : pb::IMessage<VehicleCount> {
    private static readonly pb::MessageParser<VehicleCount> _parser = new pb::MessageParser<VehicleCount>(() => new VehicleCount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VehicleCount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Atom.AtomTollReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleCount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleCount(VehicleCount other) : this() {
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleCount Clone() {
      return new VehicleCount(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VehicleCount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VehicleCount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VehicleCount other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchRange : pb::IMessage<SearchRange> {
    private static readonly pb::MessageParser<SearchRange> _parser = new pb::MessageParser<SearchRange>(() => new SearchRange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchRange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Atom.AtomTollReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchRange(SearchRange other) : this() {
      StartDate = other.startDate_ != null ? other.StartDate.Clone() : null;
      EndDate = other.endDate_ != null ? other.EndDate.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchRange Clone() {
      return new SearchRange(this);
    }

    /// <summary>Field number for the "startDate" field.</summary>
    public const int StartDateFieldNumber = 1;
    private global::Atom.date startDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Atom.date StartDate {
      get { return startDate_; }
      set {
        startDate_ = value;
      }
    }

    /// <summary>Field number for the "endDate" field.</summary>
    public const int EndDateFieldNumber = 2;
    private global::Atom.date endDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Atom.date EndDate {
      get { return endDate_; }
      set {
        endDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchRange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StartDate, other.StartDate)) return false;
      if (!object.Equals(EndDate, other.EndDate)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (startDate_ != null) hash ^= StartDate.GetHashCode();
      if (endDate_ != null) hash ^= EndDate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (startDate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartDate);
      }
      if (endDate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndDate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (startDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartDate);
      }
      if (endDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndDate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchRange other) {
      if (other == null) {
        return;
      }
      if (other.startDate_ != null) {
        if (startDate_ == null) {
          startDate_ = new global::Atom.date();
        }
        StartDate.MergeFrom(other.StartDate);
      }
      if (other.endDate_ != null) {
        if (endDate_ == null) {
          endDate_ = new global::Atom.date();
        }
        EndDate.MergeFrom(other.EndDate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (startDate_ == null) {
              startDate_ = new global::Atom.date();
            }
            input.ReadMessage(startDate_);
            break;
          }
          case 18: {
            if (endDate_ == null) {
              endDate_ = new global::Atom.date();
            }
            input.ReadMessage(endDate_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class date : pb::IMessage<date> {
    private static readonly pb::MessageParser<date> _parser = new pb::MessageParser<date>(() => new date());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<date> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Atom.AtomTollReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public date() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public date(date other) : this() {
      nanosecs_ = other.nanosecs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public date Clone() {
      return new date(this);
    }

    /// <summary>Field number for the "nanosecs" field.</summary>
    public const int NanosecsFieldNumber = 1;
    private long nanosecs_;
    /// <summary>
    /// number of ticks that represents date and time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Nanosecs {
      get { return nanosecs_; }
      set {
        nanosecs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as date);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(date other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nanosecs != other.Nanosecs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nanosecs != 0L) hash ^= Nanosecs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nanosecs != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Nanosecs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nanosecs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Nanosecs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(date other) {
      if (other == null) {
        return;
      }
      if (other.Nanosecs != 0L) {
        Nanosecs = other.Nanosecs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Nanosecs = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Empty : pb::IMessage<Empty> {
    private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Empty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Atom.AtomTollReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty(Empty other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty Clone() {
      return new Empty(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Empty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Empty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Empty other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
